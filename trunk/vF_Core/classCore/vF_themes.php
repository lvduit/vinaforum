<?php vF_Check();# ----------------------# Class: Themes Complie# Author: Yplit# Date: 16/6/2012#-----------------------class vF_themes{	private static $_instance;	protected $_templateCache = array();	private $_templateName = '';	protected $_params = array();	protected $_templateError = array();	protected $_languageId = 0;	protected $_styleId = 0;	protected $_templateErrors = array();	protected $_filePath = '';	public function __construct()	{		$this->_filePath = vF_DIR . '/' . vF_constant::vF_RESOURCE_DIR . '/' . vF_constant::vF_TEMPLATE_COMPILE_DIR;	}	public static function getInstance()	{		if( !self::$_instance )		{			self::$_instance = new self();		}		return self::$_instance;	}	public function create( $templateName, $params = array() )	{		$this->_templateName = $templateName;		if( $params )		{			$this->addParams( $params );		}	}	public function addParams( $params )	{		if( !$this->_params )		{			return ( $this->_params = $params );		}		return ( $this->_params = arrayMapMerge( $this->_params, $params ) );	}	public function addParam( $paramKey, $paramValue )	{		$this->_params[$paramKey] = $paramValue;	}	public function getParams()	{		return $this->_params;	}	public function getParam( $paramKey )	{		if( !$this->_params[$paramKey] ) return null;		return $this->_params[$paramKey];	}	public function getTemplateName()	{		return $this->_templateName;	}	private function _loadTemplate( $templateName )	{		if ( $template = $this->_loadTemplateFilePath( $templateName ) )		{			return $template;		}		elseif( $template = $this->_loadTemplateFromCache( $templateName ) )		{			return $template;		}		else		{			$this->_loadTemplates();			return $this->_loadTemplateFromCache( $templateName );		}	}	protected function _usingTemplateFiles()	{		if( $this->_filePath != '' ) return true;		return false;	}	private function _loadTemplateFromCache( $templateName )	{		if ( isset( $this->_templateCache[$templateName] ) )		{			return $this->_templateCache[$templateName];		}		else		{			$this->_templateCache[$templateName] = '';			return '';		}	}	protected function _loadTemplates()	{		$toLoad = $this->getToLoadList();		if( !$toLoad )		{			return;		}		$templates = $this->_getTemplatesFromDataSource( array_keys( $toLoad ) );		if ( $templates )		{			$this->_mergeIntoTemplateCache( $templates );		}		$this->_resetToLoadList();	}	protected function _getTemplatesFromDataSource(array $templateList)	{		$db = vF_GetvF::get( 'Db' );		return $db->fetchPairs('			SELECT title, template_compiled			FROM ' . $db->tableName( 'template_compiled' ) . '			WHERE title IN (' . $db->e( implode( ',', $templateList ) ) . ')				AND style_id = '. $this->_styleId .'				AND language_id = '. $this->_languageId .'		');	}	public function loadTemplate( $templateName, $themeParams, $registerSystemParams = true )	{	}	public function render( $templateName, $params )	{		$template = $this->_loadTemplate( $this->_templateName );		if( $template == '' ) return '';	//	$this->loadPhrases();	//	set_error_handler( array( $this, 'handleTemplateError' ) );		$this->_templateErrors = array();		$vF_output = $this->_renderInternal($template, $extraData);	//	restore_error_handler();		if( is_array( $extraData ) AND !empty( $extraData ) )		{			$this->_mergeExtraContainerData( $extraData );		}		if( $this->_templateErrors AND $GLOBALS['vF']->System->debug )		{			if( $this->_usingTemplateFiles() )			{				$templateCode = file_get_contents( $template );			}			else			{				$templateCode = $template;			}			$lines = preg_split('/\r?\n/', $template);			echo "<div class=\"baseHtml\"><h4>Template Errors: " . htmlspecialchars($this->_templateName) . "</h4><ol>\n";			foreach( $this->_templateErrors AS $error )			{				$contextLine = ( $error['line'] > 1 ? $error['line'] - 2 : 0);				$context = array_slice($lines, $contextLine, 3, true);				echo "\t<li><i>" . htmlspecialchars($error['error']) . "</i> in " . htmlspecialchars($error['file']) . ", line $error[line]";				if ($context)				{					echo ": <pre>";					foreach ($context AS $lineNum => $contextLine)					{						echo ($lineNum + 1) . ": " . htmlspecialchars($contextLine) . "\n";					}					echo "</pre>";				}				echo "</li>\n";			}			echo "</ol></div>\n\n";		}		return $vF_output;	}	protected function _mergeExtraContainerData( array $extraData )	{		$this->_extraData = mapMerge( $this->_extraData, $extraData );	}	protected function _renderInternal( $template, &$extraData )	{		$vF_output = '';		$vF_extraData = array();		if( $this->_usingTemplateFiles() )		{			if( file_exists( $template ) )			{				include($template);			}		}		else		{			eval( $template );		}		return $vF_output;	}	protected function _loadTemplateFilePath( $templateName )	{		if( $this->_filePath )		{			return $this->_filePath . '/' . preg_replace('/[^a-z0-9_\.-]/i', '', $templateName ) . '.php';		}		else		{			return '';		}	}	public function printResult( $content )	{		//vF_hook::getInstance()->parseHook( 'printResultStart' );		//$this->print_header();		echo $content;		// vF_hook::getInstance()->parseHook( 'printResultEnd' );	}	public function getRequiredCssUrl( array $requirements )	{		sort($requirements);		if( isset( $this->_params['visitorLanguage']['text_direction'] ) )		{			$textDirection = $this->_params['visitorLanguage']['text_direction'];		}		else		{			$textDirection = 'LTR';		}		return 'index.php?'. vF_constant::vF_MODULE_PARAM .'=css&css=' . implode(',', array_map('urlencode', $requirements))			. '&style=' . self::$_styleId			. '&dir=' . $textDirection;	}	public function compileTemplate( $templateID = 0 )	{		$db = vF_getVf::get('Db');		$templateID = intval( $templateID );		$startTime = microtime(true);		$complete = true;		$db->query( 'SELECT * FROM `'. $db->tableName( 'templates' ) .'` WHERE `templateID` = ' . $templateID );		if( $db->nums() == 0 ) return false;		$template = $db->fetchrow();		$db->query( 'DELETE FROM `'. $db->tableName( 'template_compiled' ) .'` WHERE `templateName` = ' . $db->e( $template['title'] ) );		foreach($styleIds AS $styleId)		{			if ($styleId < $startStyle)			{				continue;			}			$lastStyle = $styleId;			$lastTemplate = 0;			$templates = $this->getAllTemplatesInStyle($styleId, true);			foreach ($templates AS $key => $template)			{				$lastTemplate++;				if ($styleId == $startStyle && $lastTemplate < $startTemplate)				{					continue;				}				$this->compileNamedTemplateInStyleTree($template['title'], $template['style_id']);				if ($maxExecution && (microtime(true) - $startTime) > $maxExecution)				{					$complete = false;					break 2;				}			}		}		if ($complete)		{			$this->getModelFromCache('XenForo_Model_Style')->updateAllStylesLastModifiedDate();		}		XenForo_Db::commit($db);		if ($complete)		{			return true;		}		else		{			return array($lastStyle, $lastTemplate + 1);		}	}	public static function fileHandlerGet($title, $styleId, $languageId)	{		return self::getInstance()->_fileHandlerGetFileName($title, $styleId, $languageId);	}	/**	 * Save the specified template	 *	 * @param string $title	 * @param integer $styleId	 * @param integer $languageId	 * @param string $template	 *	 * @return string $filename	 */	public static function fileHandlerSave($title, $styleId, $languageId, $template)	{		return self::getInstance()->_saveTemplate($title, $styleId, $languageId, '<?php vF_Check(); ' . $template);	}	/**	 * Delete the specified template(s)	 *	 * Each parameter can be passed as	 * -	a scalar (to match that parameter)	 * -	null (to use a wildcard for that parameter)	 * -	an array of scalars (to match multiple specific items)	 *	 * @param string|array|null $title	 * @param integer|array|null $styleId	 * @param string|array|null $languageId	 */	public static function fileHandlerDelete( $title = null, $styleId = null, $languageId = null )	{		self::getInstance()->_deleteTemplate($title, $styleId, $languageId);	}	protected function _createTemplateDirectory()	{		if (!is_dir($this->_path))		{			if (XenForo_Helper_File::createDirectory($this->_path))			{				return XenForo_Helper_File::makeWritableByFtpUser($this->_path);			}			else			{				return false;			}		}		return true;	}	/**	 * @see XenForo_Template_FileHandler::save	 */	protected function _saveTemplate( $title, $styleId, $languageId, $template )	{		$this->_createTemplateDirectory();		$fileName = $this->_fileHandlerGetFileName($title, $styleId, $languageId);		file_put_contents( $fileName, $template );		XenForo_Helper_File::makeWritableByFtpUser( $fileName );		return $fileName;	}	/**	 * @see XenForo_Template_FileHandler::delete	 */	protected function _deleteTemplate( $title = null, $styleId = null, $languageId = null )	{		$this->_createTemplateDirectory();		$title = $this->_prepareWildcard($title);		$styleId = $this->_prepareWildcard($styleId);		$languageId = $this->_prepareWildcard($languageId);		foreach( $title AS $_title )		{			foreach( $styleId AS $_styleId )			{				foreach( $languageId AS $_languageId )				{					$files = glob( $this->_fileHandlerGetFileName( $_title, $_styleId, $_languageId ) );					if( is_array( $files ) )					{						foreach( $files AS $file )						{							@unlink( $file );						}					}				}			}		}	}	/**	 * Takes a parameter for the filename and turns it into an array of parameters	 *	 * @param mixed $item	 *	 * @return array	 */	protected function _fileHandlerPrepareWildcard( $item )	{		if( is_null( $item ) )		{			return array('*');		}		elseif( !is_array( $item ) )		{			return array( $item );		}		else		{			return $item;		}	}	/**	 * Prepares a glob-friendly filename or wildcard for the specified template(s)	 *	 * @param string $title	 * @param integer $styleId	 * @param integer $languageId	 *	 * @return string	 */	protected function _fileHandlerGetFileName( $title, $styleId, $languageId )	{		$title = preg_replace('/[^a-z0-9_\.-]/i', '', $title);		$styleId = intval( $styleId );		$languageId = intval( $languageId );		return $this->_path . '/' . 'template_s' . $styleId . '_l' . , $languageId . '_' . $title . '.php';	}	public function getMappedTemplatesByTemplateId( $templateId )	{		$db = vF_getVf::get('Db');		$Mapped = array();		$db->query( 'SELECT * FROM `'. $db->tableName( 'template_map' ) .'` WHERE `templateID` = ' . intval( $templateId ) );		while( $result = $db->fecthrow() )		{			$Mapped[] = $result;		}		return $Mapped;	}	public function compileTemplateInStyleTree( array $parsedRecord )	{		$parsedTemplate = unserialize( $parsedRecord['templateParsed'] );		$dependentTemplates = array();		$styles = $this->getMappedTemplatesByTemplateId( $parsedRecord['templateID'] );		foreach( $styles AS $compileStyle )		{			$this->compileAndInsertParsedTemplate( $compileStyle['template_map_id'], $parsedTemplate, $parsedRecord['title'], $compileStyle['styleID'] );			$dependentTemplates[] = $compileStyle['templateMapID'];		}		return $dependentTemplates;	}	public function compileAndInsertParsedTemplate( $templateMapId, $parsedTemplate, $title, $compileStyleId )	{		$isCss = (substr($title, -4) == '.css');		if (!$compileStyleId AND !$isCss)		{			return; // skip compiling master templates, but compile css we need it		}		$compiler = new vF_templateCompiler('');		$languages = vF_language->getAllLanguage();		$fileTemplates = $GLOBALS['vF']->Options->templateFiles;		$db = vF_getVf::get('Db');		if( $isCss )		{			$compiledTemplate = $compiler->compileParsed( $parsedTemplate, $title, $compileStyleId, 0 );			$db->query( 'INSERT INTO `'. $db->tableName( 'template_compiled' ) .'` ( `styleID`, `languageID`, `title`, `templateCompiled`) VALUE ( '. $compileStyleId .', '. 0 .', '. $db->e( $title ) .', '. $db->e( $compiledTemplate ) .' )');			if( $fileTemplates )			{				$this->fileHandlerSave( $title, $compileStyleId, 0, $compiledTemplate );			}		}		else		{			foreach( $languages AS $language )			{				$compiledTemplate = $compiler->compileParsed( $parsedTemplate, $title, $compileStyleId, $language['language_id'] );				$db->query( 'INSERT INTO `'. $db->tableName( 'template_compiled' ) .'` ( `styleID`, `languageID`, `title`, `templateCompiled`) VALUE ( '. $compileStyleId .', '. $language['languageID'] .', '. $db->e( $title ) .', '. $db->e( $compiledTemplate ) .' )');				if( $fileTemplates )				{					$this->fileHandlerSave( $title, $compileStyleId, $language['languageID'], $compiledTemplate );				}			}		}		//$db->delete('xf_template_include', 'source_map_id = ' . $db->quote($templateMapId));		foreach( $compiler->getIncludedTemplates() AS $includedMapId )		{			$db->query( 'INSERT INTO `'. $db->tableName( 'templateInclude' ) .'` ( `sourceMapID`, `targetMapID` ) VALUE ( '. $templateMapId .', '. $includedMapId .' )' );		}		$db->query( 'DELETE FROM `'. $db->tableName( 'template_phrase' ) .'` WHERE `templateMapID` = ' . intval( $templateMapId ) );		foreach( $compiler->getIncludedPhrases() AS $includedPhrase )		{			$db->query( 'INSERT INTO `'. $db->tableName( 'template_phrase' ) .'` ( `templateMapID`, `phraseTitle` ) VALUE ( '. $templateMapId .', '. $includedPhrase .' )' )		}	}	public static function replaceIncludesWithLinkRel( $templateText )	{		$search = array(			'#<vf:require\s+css="([^"]+)"\s*/>#siU'			=>'<link rel="vF_stylesheet" type="text/css" href="\1" />',			'#<vf:edithint\s+template="([^"]+\.css)"\s*/>#siU'			=> '<link rel="vF_stylesheet_hint" type="text/css" href="\1" />',			'#<vf:edithint\s+template="([^"]+)"\s*/>#siU'			=> '<link rel="vF_template_hint" type="text/html" href="\1.html" />',			'#<vf:include\s+template="([^"]+)"(\s*/)?>#siU'			=> '<link rel="vF_template" type="text/html" href="\1.html"\2>',			'#</vf:include>#siU'			=> '</link>',		);		return preg_replace(array_keys($search), $search, $templateText);	}	public static function replaceLinkRelWithIncludes($templateText)	{		$search = array(			'#</link>#siU'			=> '</vf:include>',			'#<link rel="vF_template" type="text/html" href="([^"]+)(\.html)?"(\s*/)?>#siU'			=> '<vf:include template="\1"\3>',			'#<link rel="vF_template_hint" type="text/html" href="([^"]+)(\.html)?"\s/>#siU'			=> '<vf:edithint template="\1" />',			'#<link rel="vF_stylesheet_hint" type="text/css" href="([^"]+)"\s*/>#siU'			=> '<vf:edithint template="\1" />',			'#<link rel="vF_stylesheet" type="text/css" href="([^"]+)"\s*/>#siU'			=> '<vf:require css="\1" />'		);		return preg_replace(array_keys($search), $search, $templateText);	}	public function writeTemplateFiles( $enable = false, $handleOptions = true )	{		if( $handleOptions AND $GLOBALS['vF']->Options->templateFiles )		{			vF_getoptions::getInstance()->updateOptions( array( 'templateFiles' => 0 ) );		}		$this->deleteTemplateFiles();		$db = vF_getVf::get('Db');		$db->query( 'SELECT * FROM `'. $db->tableName( 'template_compiled' ) .'`' );		while( $template = $db->fetchrow() )		{			$this->fileHandlerSave( $template['title'], $template['styleID'], $template['languageID'], $template['templateCompiled']);		}		if( $handleOptions AND $enable )		{			vF_getOptions::getIntance()->updateOptions( array( 'templateFiles' => 1 ) );		}	}	public function deleteTemplateFiles()	{		$this->fileHandlerDelete();	}}