<?php vf_check();# ----------------------# Class: Database# Author: Yplit# Date: 13/6/2012#-----------------------class vF_Database{	private $connection	= false;	private $dbhost = 'localhost';	private $dbuser = 'root';	private $dbpass = '';	private $dbname = '';	private $last_result = false;	private $debug_mode	= false;	private $debug_info	= false;	private $ext = '';	public $fatal_error	= FALSE;	public $disconnect_on_descruct;		const vF_NO_FILE_CONFIG = "Do not exists config file! Please contact to webmaster!";	const vF_CONFIG_FILE_ERROR = "Config file error! Please contact to webmaster!";	public function __construct( object $vF_Config )	{		if( !$vF_Config or !is_object( $vF_Config ) )		{			trigger_error( vF_CONFIG_FILE_ERROR );			return;		}		if( !empty( $vF_Config->dbhost ) ) $this->dbhost = (string)$vF_Config->dbhost;		if( !empty( $vF_Config->dbuser ) ) $this->dbuser = (string)$vF_Config->dbuser;		if( !empty( $vF_Config->dbpass ) ) $this->dbpass = (string)$vF_Config->dbpass;		if( !empty( $vF_Config->dbname ) ) $this->dbname = (string)$vF_Config->dbname;		if( !empty( $vF_Config->debug ) ) $this->debug_mode = (boolean)$vF_Config->debug;		if( ! isset($GLOBALS['MYSQL_DEBUG_INFO']) )		{			$GLOBALS['MYSQL_DEBUG_INFO'] = (object) array('queries'=>array(), 'time'=>0);		}		$this->debug_info	= & $GLOBALS['MYSQL_DEBUG_INFO'];		$this->ext	= 'mysql';		if( !empty( $vF_Config->dbMyExt ) and $vF_Config->dbMyExt == 'mysqli' and function_exists('mysqli_connect') )		{			$this->ext	= 'mysqli';		}		$this->disconnect_on_descruct	= true;		$this->connect();	}		public function connect()	{		$time	= microtime(true);		$this->connection	= $this->ext=='mysqli' ? mysqli_connect($this->dbhost, $this->dbuser, $this->dbpass) : mysql_connect($this->dbhost, $this->dbuser, $this->dbpass);		if(FALSE == $this->connection) {			return $this->fatal_error('Connect');		}		$db	= $this->ext=='mysqli' ? mysqli_select_db($this->connection, $this->dbname) : mysql_select_db($this->dbname, $this->connection);		if(FALSE == $db) {			return $this->fatal_error('Select DB');		}		$this->ext=='mysqli' ? mysqli_query($this->connection, 'SET NAMES utf8') : mysql_query('SET NAMES utf8', $this->connection);		if($this->debug_mode) {			$time	= microtime(true) - $time;			$this->debug_info->queries[]	= (object) array (				'query'	=> 'CONNECT '.$this->dbhost,				'time'	=> number_format($time, 5, '.', ''),			);			$this->debug_info->time		+= $time;		}		return $this->connection;	}		public function query($query, $remember_result=true)	{		$time = microtime(true);		$result = $this->ext=='mysqli' ? mysqli_query($this->connection, $query) : mysql_query($query, $this->connection);		if($this->debug_mode)		{			$time = microtime( true ) - $time;			$this->debug_info->queries[] = (object) array ( 'query' => $query, 'time' => number_format( $time, 5, '.', '' ) );			$this->debug_info->time += $time;		}		if( false == $result )		{			return $this->fatal_error($query);		}		if( $remember_result )		{			$this->last_result = $result;		}		return $result;	}	public function fetch_object( $result = false )	{		$result = ( false !== $result ) ? $result : $this->last_result;		if( $result)		{			return false;		}		return $this->ext=='mysqli' ? mysqli_fetch_object($result) : mysql_fetch_object($result);	}	public function fetch_all( $query )	{		$result = $this->query( $query, false );		if(false == $result)		{			return false;		}		$data = array();		while( $obj = $this->fetch_object($result) )		{			$data[] = $obj;		}		$this->free_result($result);		return $data;	}	public function fetch_field( $query )	{		$result = $this->query( $query, false );		if( $result == false )		{			return false;		}		$row = ( $this->ext=='mysqli' ? mysqli_fetch_row($result) : mysql_fetch_row($result) );		if( !$row )		{			return false;		}		$this->free_result($result);		return $row[0];	}	public function num_rows( $result = false )	{		$result = ( false !== $result ) ? $result : $this->last_result;		if( $result == false )		{			return false;		}		return $this->ext=='mysqli' ? mysqli_num_rows($result) : mysql_num_rows($result);	}	public function nums( $result = false )	{		return $this->num_rows( $result );	}	public function insert_id()	{		if( $this->connection == false )		{ 			$this->connect();		}		return intval( $this->ext=='mysqli' ? mysqli_insert_id($this->connection) : mysql_insert_id($this->connection) );	}	public function affected_rows()	{		if( $this->connection == false )		{ 			$this->connect();		}		return $this->ext=='mysqli' ? mysqli_affected_rows($this->connection) : mysql_affected_rows($this->connection);	}		public function data_seek( $row = 0, $result = false )	{		$result = ( false !== $result ) ? $result : $this->last_result;		if( $result == false )		{			return false;		}		return $this->ext=='mysqli' ? mysqli_data_seek( $result, $row ) : mysql_data_seek( $result, $row );	}		public function free_result( $result = false )	{		$result = ( false !== $result ) ? $result : $this->last_result;		if( $result == false )		{			return false;		}		return $this->ext=='mysqli' ? mysqli_free_result( $result ) : mysql_free_result( $result );	}	public function escape( $string )	{		if( $this->connection == false )		{ 			$this->connect();		}		return $this->ext=='mysqli' ? mysqli_real_escape_string( $this->connection, $string ) : mysql_real_escape_string( $string, $this->connection );	}	public function e( $str )	{		return $this->escape( $str );	}	private function fatal_error( $query )	{		$this->fatal_error = true;		$error = $this->ext=='mysqli' ? mysqli_error( $this->connection ) : mysql_error( $this->connection );		if( $this->debug_mode )		{			echo 'MySQL Query: '.$query.'<br />';			echo 'MySQL Error: '.$error.'<br />';			exit;		}		exit;		//return false;	}		public function get_debug_info()	{		$debug_info = clone($this->debug_info);		$debug_info->time = number_format($debug_info->time, 4, '.', '');		$debug_info->queries = array_reverse($debug_info->queries);		return $debug_info;	}		public function delete_debug_info()	{		$this->debug_info->queries = array();	}		public function __destruct()	{		if( $this->disconnect_on_descruct )		{			if( $this->connection ) 			{				$this->ext=='mysqli' ? @mysqli_close( $this->connection ) : @mysql_close( $this->connection );				$this->connection = false;			}		}	}}?>