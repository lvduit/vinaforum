<?php vF_Check();# ----------------------# Class: Cache Manager# Author: Yplit# Date: 13/6/2012#-----------------------class vF_cache{	protected static $_instance;	protected $_cacheContent = array();	public $cacheDir = '';	public $cacheExt = 'cache';	public $cacheFile = array();	public $vF;	public function __construct()	{		$this->vF = $GLOBALS['vF'];		$this->cacheDir = vF_DIR . '/' . vF_constant::vF_RESOURCE_DIR . '/' . vF_constant::vF_CACHE_DIR;		$this->loadDefaultCacheFile();		$this->preloadAllCache();		$this->_chmod( $this->cacheDir, 0777 );	}	public function setCacheDir( $cacheDir )	{		$this->cacheDir = $cacheDir;	}	public function setCacheFile( $cacheFile )	{		$this->cacheFile = $cacheFile;	}	public function setCacheExt( $cacheExt )	{		$this->cacheExt = $cacheExt;	}	public static function getInstance()	{		if( !self::$_instance )		{			self::$_instance = new self();		}		return self::$_instance;	}	public function reset()	{		$readDir = @scandir( $this->cacheDir );		if( !$readDir ) return false;		foreach( $readDir as $file )		{			if( $file == '.' OR $file == '..' OR $file == 'index.html' )			{				continue;			}			$file = $this->cacheDir . '/' . $file;			@unlink( $file );		}		$this->_cacheContent = array();	}	public function loadDefaultCacheFile()	{		$this->cacheFile = array(			'options' => $this->_createCacheFile( 'options' ),			'languages' => $this->_createCacheFile( 'languages' ),			'phrase' => $this->_createCacheFile( 'phrase' ),			'moduleList' => $this->_createCacheFile( 'moduleList' )		);	}	protected function _createCacheFile( $cacheType )	{		return $cacheType . '-' . vF_hash::getinstance()->hashString( $GLOBALS['vF_Config']->key ) . '.' . $this->cacheExt;	}	public function loadCache( $cacheName )	{		if( !isset( $this->_cacheContent[$cacheName] ) )		{			$this->preloadAllCache();		}		if( !isset( $this->_cacheContent[$cacheName] ) )		{			return null;		}		return unserialize( $this->_cacheContent[$cacheName] );	}	public function preloadAllCache()	{		$this->_cacheContent = array();		foreach( $this->cacheFile as $cacheName => $cacheFile )		{			$content = @file_get_contents( $cacheFile );			$this->_cacheContent[$cacheName] = ( $content ? $content : '' );		}	}	public function newCache( $cacheName, $cacheContent, $isSerialize = false )	{		$cacheFile = $this->cacheDir . '/' . $this->_createCacheFile( $cacheName );		if( array_key_exists( $cacheName, array_keys( $this->cacheFile ) ) and $cacheFile != $this->cacheFile[$cacheName] )		{			$this->cacheFile[$cacheName] = $cacheFile;		}		$this->_cacheContent[$cacheName] = '';		if( file_exists( $this->cacheFile[$cacheName] ) )		{			@unlink( $this->cacheFile[$cacheName] );		}		$cacheContent = serialize( $cacheContent );		$this->_cacheContent[$cacheName] = $cacheContent;		file_put_contents( $cacheFile, $cacheContent );	}	protected function _chmod( $dirName, $mode )	{		if( !file_exists( $dirName ) ) return false;		return @chmod( $dirName, $mode );	}}